---
title: "class06"
author: "sharlene yang, PID: A16351303"
format: pdf
---

##Grades

>Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: "https://tinyurl.com/gradeinput"

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

```

Finding the mean for student 1

```{r}
mean(student1)
```

The issue with `mean(student1)` is that this does not work with vectors that contain 'NA'

```{r}
mean(student2, na.rm = TRUE)
```

Trying this code on student3

```{r}
mean(student3, na.rm = TRUE)
```

The issue with this is that it completely removes all the `NA`s instead of just one `NA`

We can replace the missed assignment NA values with a score of zero. - How can I do this? -First I need to find where the NA values are?

We can use `is.na()` function to help perhaps?

```{r}
student2
is.na(student2)
```

We call out which one is "True" and set it equal to 0

```{r}
student2[is.na(student2)] <- 0
student2

```

To save the original vector, we will set the original vector to x and use it to find replace all the NA to 0.

```{r}
x <- student3
x[is.na(x)] <- 0
mean(x)
```

Finally, we want to drop the lowest score before calculating the mean. This is equivalent to allowing the students to drop their worst assignment score.\
- `-which.min()` drops the lowest score

```{r}
x <- student1
x
which.min(x)
x[-which.min(x)]
```

Now I need to put this all together to make out working snippet:

```{r}
x <- student3

#Map/ replace NA values to zero
x[is.na(x)] <- 0

#Exclude the lowest score
x[-which.min(x)]

#Calculate the mean
mean(x[-which.min(x)])
```

Cool! This is my working snippet that I can turn into a function called `grade()`

All functions in R have at least 3 things:

-   **Name**, in our case "grade"
-   Input **arguments**, students1 etc.
-   **Body**, this is our working snippet above.

```{r}
grade <- function(x) {

#Map/replace NA values to zero
x[is.na(x)] <- 0

#Exclude the lowest score and calculate the mean
mean(x[-which.min(x)])
}
```

Can I use the function now?

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Read a gradebook from online:

```{r}
hw <-  read.csv("https://tinyurl.com/gradeinput", row.names =1)
hw

```

We can use the `apply()` function to grade all the students in this class with our new `grade()` function.

The `apply()` function allows us to run any function over whether the rows or column of a data.frame. Let's see how this works.

*sidenote:* `apply(data, margin = 1 (row) or 2 (column), function)`

```{r}
ans <- apply(hw, 1, grade)
ans
```

>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook?

```{r}
which.max(ans)

#to find the score
ans[which.max(ans)]
```

>Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall?

need `na.rm= TRUE` to remove the NA

```{r}
ave.score <- apply(hw, 2, mean, na.rm= TRUE)
which.min(ave.score)
```


```{r}
tot.scores <- apply(hw, 2, sum, na.rm= TRUE)
which.min(tot.scores)

```

```{r}
tot.scores
ave.score
```

answer: Homework 2

>Q4. Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
hw$hw1
```

```{r}
ans
```

```{r}
cor(hw$hw1, ans)
cor(hw$hw3, ans)
```
IF I try on hw2, I get NA as there are missing homeworks (i.e. NA values)

```{r}
hw$hw2
```

I will mask all NA values to Zero.

```{r}
mask <- hw
mask [is.na(mask)] <- 0
mask
```

```{r}
cor(mask$hw5, ans)
```

```{r}
apply(mask, 2, cor, y= ans)
```

